{"version":3,"sources":["components/Feedback/Feedback.js","components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/buttons/buttons.js","App.js","index.js"],"names":["Feedback","buttons","onHandleIncrement","className","styles","list","map","id","value","item","name","button","onClick","evt","Section","title","children","Statistics","good","neutral","bad","totalFeedback","positiveFeedbackPercent","message","App","useState","feedbacks","setFeedbacks","target","prevState","positiveFeedbackPercentage","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VAqCeA,EAlCE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,kBAC3B,OACE,qBAAKC,UAAU,UAAf,SACE,oBAAIA,UAAWC,IAAOC,KAAtB,SACGJ,EAAQK,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAClB,OACE,oBAAIL,UAAWC,IAAOK,KAAtB,SACE,wBACEC,KAAMF,EACNL,UAAWC,IAAOO,OAClBC,QAAS,SAACC,GACRX,EAAkBW,IAJtB,SAOGL,KAR4BD,W,gBCQ9BO,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIb,UAAWC,IAAOW,MAAtB,SAA8BA,IAC7BC,M,gCCUQF,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIb,UAAWC,IAAOW,MAAtB,SAA8BA,IAC7BC,MCyCQC,EA5CI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,cACAC,EALiB,EAKjBA,wBALiB,OAOjB,qBAAKnB,UAAU,UAAf,SACGe,GAAQC,GAAWC,EAClB,+BACE,oBAAejB,UAAWC,IAAOK,KAAjC,SACE,0CAAaS,MADP,QAIR,oBAAcf,UAAWC,IAAOK,KAAhC,SACE,yCAAYW,MADN,OAIR,oBAAkBjB,UAAWC,IAAOK,KAApC,SACE,6CAAgBU,MADV,WAIR,oBAAgBhB,UAAWC,IAAOK,KAAlC,SACE,2CAAcY,MADR,SAIR,oBAA2BlB,UAAWC,IAAOK,KAA7C,SACE,uDAA0Ba,EAA1B,SADM,uBAKV,cAAC,EAAD,CAAcC,QAAS,yBC7BdtB,EANC,CACd,CAAEM,GAAI,EAAGC,MAAO,QAChB,CAAED,GAAI,EAAGC,MAAO,WAChB,CAAED,GAAI,EAAGC,MAAO,QCGH,SAASgB,IAAO,IAAD,EACMC,mBAAS,CACzCP,KAAM,EACNC,QAAS,EACTC,IAAK,IAJqB,mBACrBM,EADqB,KACVC,EADU,KAOpBT,EAAuBQ,EAAvBR,KAAMC,EAAiBO,EAAjBP,QAASC,EAAQM,EAARN,IAoBvB,OACE,sBAAKjB,UAAU,YAAf,UACE,cAAC,EAAD,CAASY,MAAM,wBAAf,SACE,cAAC,EAAD,CACEd,QAASA,EACTC,kBAvB6B,SAAC,GAAgB,IAC5CQ,EAD2C,EAAbkB,OAC9BlB,KAERiB,GAAa,SAACE,GAAD,mBAAC,eACTA,GADQ,kBAEVnB,EAAOmB,EAAUnB,GAAQ,YAqB1B,cAAC,EAAD,CAASK,MAAM,aAAf,SACE,cAAC,EAAD,CACEG,KAAMA,EACNE,IAAKA,EACLD,QAASA,EACTE,cArBCH,EAAOC,EAAUC,EAsBlBE,wBAnBgC,WACtC,IAAMQ,EAA8BZ,GAAQA,EAAOC,EAAUC,GAAQ,IACrE,OAAOW,KAAKC,MAAMF,GAiBaG,UC1CnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,W","file":"static/js/main.7c013461.chunk.js","sourcesContent":["import styles from \"./Feedback.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Feedback = ({ buttons, onHandleIncrement }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <ul className={styles.list}>\r\n        {buttons.map(({ id, value }) => {\r\n          return (\r\n            <li className={styles.item} key={id}>\r\n              <button\r\n                name={value}\r\n                className={styles.button}\r\n                onClick={(evt) => {\r\n                  onHandleIncrement(evt);\r\n                }}\r\n              >\r\n                {value}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedback.propTypes = {\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      value: PropTypes.string,\r\n    })\r\n  ),\r\n  onHandleIncrement: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Feedback;\r\n","import styles from \"./Section.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2 className={styles.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styles from \"./Notification.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2 className={styles.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styles from \"./Statistics.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  totalFeedback,\r\n  positiveFeedbackPercent,\r\n}) => (\r\n  <div className=\"wrapper\">\r\n    {good || neutral || bad ? (\r\n      <ul>\r\n        <li key=\"good\" className={styles.item}>\r\n          <span>Good: {good}</span>\r\n        </li>\r\n\r\n        <li key=\"bad\" className={styles.item}>\r\n          <span>Bad: {bad}</span>\r\n        </li>\r\n\r\n        <li key=\"neutral\" className={styles.item}>\r\n          <span>Neutral: {neutral}</span>\r\n        </li>\r\n\r\n        <li key=\"total\" className={styles.item}>\r\n          <span>Total: {totalFeedback}</span>\r\n        </li>\r\n\r\n        <li key=\"positiveFeedback\" className={styles.item}>\r\n          <span>Positive feedback: {positiveFeedbackPercent} %</span>\r\n        </li>\r\n      </ul>\r\n    ) : (\r\n      <Notification message={\"No feedback given\"} />\r\n    )}\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  totalFeedback: PropTypes.number.isRequired,\r\n  positiveFeedbackPercent: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","const buttons = [\r\n  { id: 1, value: \"good\" },\r\n  { id: 2, value: \"neutral\" },\r\n  { id: 3, value: \"bad\" },\r\n];\r\n\r\nexport default buttons;\r\n","import React, { useState } from \"react\";\nimport Feedback from \"./components/Feedback/Feedback\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport buttons from \"./components/buttons/buttons\";\n\nexport default function App() {\n  const [feedbacks, setFeedbacks] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const { good, neutral, bad } = feedbacks;\n\n  const handleIncrementFeedbackValue = ({ target }) => {\n    const { name } = target;\n\n    setFeedbacks((prevState) => ({\n      ...prevState,\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const positiveFeedbackPercentage = (good / (good + neutral + bad)) * 100;\n    return Math.round(positiveFeedbackPercentage);\n  };\n\n  return (\n    <div className=\"container\">\n      <Section title=\"Please leave feedback\">\n        <Feedback\n          buttons={buttons}\n          onHandleIncrement={handleIncrementFeedbackValue}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          bad={bad}\n          neutral={neutral}\n          totalFeedback={countTotalFeedback()}\n          positiveFeedbackPercent={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}